#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail

echo "========================================="
echo "BOCKER INTEGRATION TEST - SLOW VERSION"
echo "========================================="
echo "Starting comprehensive container testing..."
echo ""

# Initialize a new container from base image and capture the image ID
echo "STEP 1: Creating new image from base..."
echo "Command: ./bocker init ~/base-image"
sleep 3
img="$(./bocker init ~/base-image | awk '{print $2}')"
echo "âœ“ Created image: $img"
echo "Waiting 5 seconds for image creation to stabilize..."
sleep 5

# Check if the image exists in the image list
echo ""
echo "STEP 2: Verifying image exists in registry..."
echo "Command: ./bocker images | grep -qw \"$img\""
sleep 2
./bocker images | grep -qw "$img"
[[ "$?" == 0 ]]
echo "âœ“ Image verification passed - image is properly registered"
echo "Pausing for 3 seconds..."
sleep 3

echo ""
echo "STEP 3: Installing procps-ng package..."
echo "This will take some time as we're installing system packages..."
echo "Command: ./bocker run \"$img\" yum install -y procps-ng"
sleep 2
./bocker run "$img" yum install -y procps-ng
echo "Package installation completed. Finding container ID..."
sleep 3
ps="$(./bocker ps | grep 'yum install -y procps-ng' | awk '{print $1}')"
echo "âœ“ Container ID for yum install: $ps"
echo "Waiting 4 seconds before committing changes..."
sleep 4

echo ""
echo "STEP 4: Committing changes to create new image layer..."
echo "Command: ./bocker commit \"$ps\" \"$img\""
sleep 2
./bocker commit "$ps" "$img"
echo "âœ“ Committed changes to image $img"
echo "Allowing 5 seconds for commit to complete..."
sleep 5

echo ""
echo "========================================="
echo "RACE CONDITION TEST SECTION"
echo "========================================="
echo "This section tests concurrent container operations..."
sleep 3

echo ""
echo "STEP 5: Starting background container with delayed command..."
echo "Command: ./bocker run \"$img\" \"sleep 5 && ps aux\" &"
echo "This container will sleep for 5 seconds, then run ps aux"
sleep 2
./bocker run "$img" "sleep 5 && ps aux" &
echo "âœ“ Background process started"
echo "Waiting 4 seconds to let container get into sleep state..."
sleep 4

echo ""
echo "STEP 6: Locating the sleeping container..."
echo "Command: ./bocker ps"
./bocker ps
echo ""
echo "Searching for container running 'sleep 5' command..."
sleep 2
ps="$(./bocker ps | grep 'sleep 5' | awk '{print $1}')"
echo "âœ“ Found container process ID: $ps"
echo "Waiting 3 seconds before attempting exec..."
sleep 3

echo ""
echo "STEP 7: Executing command inside running container..."
echo "Command: ./bocker exec \"$ps\" ps aux | wc -l"
echo "This should show processes running inside the container..."
sleep 2
exec="$(./bocker exec "$ps" ps aux | wc -l)"
echo "âœ“ ps aux output has $exec lines"
echo "Verifying we got exactly 4 lines (expected for minimal container)..."
sleep 2
[[ "$exec" == "4" ]]
echo "âœ“ Line count assertion passed - container is running correctly"

echo ""
echo "Waiting 6 seconds for background process to complete its sleep cycle..."
echo "The container should finish its 'sleep 5 && ps aux' command..."
sleep 6
echo "âœ“ Background process should be finished now"

echo ""
echo "========================================="
echo "CONTAINER LIFECYCLE TEST SECTION"
echo "========================================="
sleep 2

echo ""
echo "STEP 8: Running quick command that will exit immediately..."
echo "Command: ./bocker run \"$img\" ps aux"
echo "This container will run ps aux and then exit"
sleep 3
./bocker run "$img" ps aux
echo "âœ“ ps aux command completed and container exited"
echo "Waiting 4 seconds for container cleanup..."
sleep 4

echo ""
echo "STEP 9: Finding the exited container..."
echo "Command: ./bocker ps"
./bocker ps
echo ""
echo "Searching for container that ran 'ps aux'..."
sleep 2
ps="$(./bocker ps | grep 'ps aux' | awk '{print $1}')"
echo "âœ“ Found ps aux container ID: $ps"
echo "Waiting 3 seconds before testing exec on exited container..."
sleep 3

echo ""
echo "STEP 10: Testing exec on exited container (should fail gracefully)..."
echo "Command: ./bocker exec \"$ps\" ps aux"
echo "This should return an error message since the container has exited..."
sleep 2
exec="$(./bocker exec "$ps" ps aux)" || true
echo "Exec result: '$exec'"
sleep 2
[[ "$exec" == "Container '$ps' exists but is not running" ]]
echo "âœ“ Confirmed container exists but is not running - proper error handling"
echo "Pausing for 4 seconds..."
sleep 4

echo ""
echo "========================================="
echo "ERROR HANDLING TEST SECTION"
echo "========================================="
sleep 2

echo ""
echo "STEP 11: Testing exec on non-existent container..."
echo "Command: ./bocker exec foo ps aux"
echo "This should return an error for non-existent container 'foo'..."
sleep 3
exec="$(./bocker exec foo ps aux)" || true
echo "Exec result: '$exec'"
sleep 2
[[ "$exec" == "No container named 'foo' exists" ]]
echo "âœ“ Confirmed non-existent container error message is correct"
echo "Final pause for 5 seconds..."
sleep 5

echo ""
echo "========================================="
echo "ALL TESTS COMPLETED SUCCESSFULLY! ðŸŽ‰"
echo "========================================="
echo "Summary:"
echo "- Image creation and verification: âœ“"
echo "- Package installation and commit: âœ“"
echo "- Race condition handling: âœ“"
echo "- Container lifecycle management: âœ“"
echo "- Error handling: âœ“"
echo ""
echo "Bocker container system is functioning correctly!"
